<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApplication1</name>
    </assembly>
    <members>
        <member name="M:SocNet.Controllers.AirportController.GetAll">
            <summary>
            Получение всех аерапортов
            </summary>
            <returns>Список всех аерапортов</returns>
        </member>
        <member name="M:SocNet.Controllers.AirportController.GetById(System.Int32)">
            <summary>
            Получение аерапортов по идентиификатору.
            </summary>
            <param name="id">Индефикатор аерапорта.</param>
            <returns>аерапорт с указанным индефикатором.</returns>
            <response code="200">Возвращает аерапортов.</response>
            <response code="404">Если аерапорт не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.AirportController.Add(Domain.Models.Airport)">
            <summary>
            Создание нового аерапорта.
            </summary>
            <param name="Airport">Индефикатор аерапорта.</param>
            <returns>Созданный аерапорт.</returns>
            <response code="201">Возвращает созданный аерапорт.</response>
        </member>
        <member name="M:SocNet.Controllers.AirportController.Update(Domain.Models.Airport)">
            <summary>
            Обновление существующего аерапорта.
            </summary>
            <param name="Airport">Данные для обновления аерапорта.</param>
            <returns>Результат обновления.</returns>
            <response code="204">Если аерапорт успешно обновлен.</response>
        </member>
        <member name="M:SocNet.Controllers.AirportController.Delete(System.Int32)">
            <summary>
            Удаление аерапорт по индентификатору.
            </summary>
            <param name="id">Индентификатору аерапорта.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если аерапорт успешно удален.</response>
            <response code="400">Если аерапорт не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.BaggageController.GetAll">
            <summary>
            Получение всех багажа
            </summary>
            <returns>Список всех багажей</returns>
        </member>
        <member name="M:SocNet.Controllers.BaggageController.GetById(System.Int32)">
            <summary>
            Получение багажей по идентиификатору.
            </summary>
            <param name="id">Индефикатор багажа.</param>
            <returns>багаж с указанным индефикатором.</returns>
            <response code="200">Возвращает багаж.</response>
            <response code="404">Если багаж не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.BaggageController.Add(Domain.Models.Baggage)">
            <summary>
            Создание нового багажа.
            </summary>
            <param name="Baggage">Индефикатор багажа.</param>
            <returns>Созданный багажа.</returns>
            <response code="201">Возвращает созданный багажа.</response>
        </member>
        <member name="M:SocNet.Controllers.BaggageController.Update(Domain.Models.Baggage)">
            <summary>
            Обновление существующего багажа.
            </summary>
            <param name="Airport">Данные для обновления багажа.</param>
            <returns>Результат обновления.</returns>
            <response code="204">Если багажа успешно обновлен.</response>
        </member>
        <member name="M:SocNet.Controllers.BaggageController.Delete(System.Int32)">
            <summary>
            Удаление багажа по индентификатору.
            </summary>
            <param name="id">Индентификатору багажа.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если багаж успешно удален.</response>
            <response code="400">Если багаж не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.BookingController.GetAll">
            <summary>
            Получение всех бронирований
            </summary>
            <returns>Список всех бронирования</returns>
        </member>
        <member name="M:SocNet.Controllers.BookingController.GetById(System.Int32)">
            <summary>
            Получение бронирования по идентиификатору.
            </summary>
            <param name="id">Индефикатор бронирования.</param>
            <returns>бронирования с указанным индефикатором.</returns>
            <response code="200">Возвращает бронирования.</response>
            <response code="404">Если бронирования не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.BookingController.Add(Domain.Models.Booking)">
            <summary>
            Создание нового бронирования.
            </summary>
            <param name="Booking">Индефикатор бронирования.</param>
            <returns>Созданный бронирования.</returns>
            <response code="201">Возвращает созданный бронирования.</response>
        </member>
        <member name="M:SocNet.Controllers.BookingController.Update(Domain.Models.Booking)">
            <summary>
            Обновление существующего бронирования.
            </summary>
            <param name="Booking">Данные для обновления бронирования.</param>
            <returns>Результат обновления.</returns>
            <response code="204">Если бронирования успешно обновлен.</response>
        </member>
        <member name="M:SocNet.Controllers.BookingController.Delete(System.Int32)">
            <summary>
            Удаление бронирования по индентификатору.
            </summary>
            <param name="id">Индентификатору бронирования.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если бронирования успешно удален.</response>
            <response code="400">Если бронирования не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.CharterController.GetAll">
            <summary>
            Получение всех чартеров.
            </summary>
            <returns>Список всех чартеров.</returns>
        </member>
        <member name="M:SocNet.Controllers.CharterController.GetById(System.Int32)">
            <summary>
            Получение чартера по идентификатору.
            </summary>
            <param name="id">Идентификатор чартера.</param>
            <returns>Чартер с указанным идентификатором.</returns>
            <response code="200">Возвращает чартер.</response>
            <response code="400">Если чартер не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.CharterController.Add(Domain.Models.Charter)">
            <summary>
            Создание нового чартера.
            </summary>
            <param name="Charter">Данные для создания чартера.</param>
            <returns>Созданный чартер.</returns>
            <response code="200">Возвращает созданный чартер.</response>
        </member>
        <member name="M:SocNet.Controllers.CharterController.Update(Domain.Models.Charter)">
            <summary>
            Обновление существующего чартера.
            </summary>
            <param name="Charter">Данные для обновления чартера.</param>
            <returns>Результат обновления.</returns>
            <response code="200">Если чартер успешно обновлен.</response>
        </member>
        <member name="M:SocNet.Controllers.CharterController.Delete(System.Int32)">
            <summary>
            Удаление чартера по идентификатору.
            </summary>
            <param name="id">Идентификатор чартера.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если чартер успешно удален.</response>
            <response code="400">Если чартер не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.flController.GetAll">
            <summary>
            Получение всех полетов.
            </summary>
            <returns>Список всех полетов.</returns>
        </member>
        <member name="M:SocNet.Controllers.flController.GetById(System.Int32)">
            <summary>
            Получение полета по идентификатору.
            </summary>
            <param name="id">Идентификатор полета.</param>
            <returns>Полет с указанным идентификатором.</returns>
            <response code="200">Возвращает полет.</response>
            <response code="400">Если полет не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.flController.Add(Domain.Models.Flight)">
            <summary>
            Создание нового полета.
            </summary>
            <param name="Flight">Данные для создания полета.</param>
            <returns>Созданный полет.</returns>
            <response code="200">Возвращает созданный полет.</response>
        </member>
        <member name="M:SocNet.Controllers.flController.Update(Domain.Models.Flight)">
            <summary>
            Обновление существующего полета.
            </summary>
            <param name="Flight">Данные для обновления полета.</param>
            <returns>Результат обновления.</returns>
            <response code="200">Если полет успешно обновлен.</response>
        </member>
        <member name="M:SocNet.Controllers.flController.Delete(System.Int32)">
            <summary>
            Удаление полета по идентификатору.
            </summary>
            <param name="id">Идентификатор полета.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если полет успешно удален.</response>
            <response code="400">Если полет не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.HisController.GetAll">
            <summary>
            Получение всех записей истории изменений.
            </summary>
            <returns>Список всех записей истории изменений.</returns>
        </member>
        <member name="M:SocNet.Controllers.HisController.GetById(System.Int32)">
            <summary>
            Получение записи истории изменений по идентификатору пользователя.
            </summary>
            <param name="id">Идентификатор пользователя.</param>
            <returns>Запись истории изменений с указанным идентификатором пользователя.</returns>
            <response code="200">Возвращает запись истории изменений.</response>
            <response code="400">Если запись истории изменений не найдена.</response>
        </member>
        <member name="M:SocNet.Controllers.HisController.Add(Domain.Models.ChangeHistory)">
            <summary>
            Создание новой записи истории изменений.
            </summary>
            <param name="ChangeHistory">Данные для создания записи истории изменений.</param>
            <returns>Созданная запись истории изменений.</returns>
            <response code="200">Возвращает созданную запись истории изменений.</response>
        </member>
        <member name="M:SocNet.Controllers.HisController.Update(Domain.Models.ChangeHistory)">
            <summary>
            Обновление существующей записи истории изменений.
            </summary>
            <param name="ChangeHistory">Данные для обновления записи истории изменений.</param>
            <returns>Результат обновления.</returns>
            <response code="200">Если запись истории изменений успешно обновлена.</response>
        </member>
        <member name="M:SocNet.Controllers.HisController.Delete(System.Int32)">
            <summary>
            Удаление записи истории изменений по идентификатору.
            </summary>
            <param name="id">Идентификатор записи истории изменений.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если запись истории изменений успешно удалена.</response>
            <response code="400">Если запись истории изменений не найдена.</response>
        </member>
        <member name="M:SocNet.Controllers.NotifiController.GetAll">
            <summary>
            Получение всех уведомлений.
            </summary>
            <returns>Список всех уведомлений.</returns>
        </member>
        <member name="M:SocNet.Controllers.NotifiController.GetById(System.Int32)">
            <summary>
            Получение уведомления по идентификатору.
            </summary>
            <param name="id">Идентификатор уведомления.</param>
            <returns>Уведомление с указанным идентификатором.</returns>
            <response code="200">Возвращает уведомление.</response>
            <response code="400">Если уведомление не найдено.</response>
        </member>
        <member name="M:SocNet.Controllers.NotifiController.Add(Domain.Models.Notification)">
            <summary>
            Создание нового уведомления.
            </summary>
            <param name="Notification">Данные для создания уведомления.</param>
            <returns>Созданное уведомление.</returns>
            <response code="200">Возвращает созданное уведомление.</response>
        </member>
        <member name="M:SocNet.Controllers.NotifiController.Update(Domain.Models.Notification)">
            <summary>
            Обновление существующего уведомления.
            </summary>
            <param name="Notification">Данные для обновления уведомления.</param>
            <returns>Результат обновления.</returns>
            <response code="200">Если уведомление успешно обновлено.</response>
        </member>
        <member name="M:SocNet.Controllers.NotifiController.Delete(System.Int32)">
            <summary>
            Удаление уведомления по идентификатору.
            </summary>
            <param name="id">Идентификатор уведомления.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если уведомление успешно удалено.</response>
            <response code="400">Если уведомление не найдено.</response>
        </member>
        <member name="M:SocNet.Controllers.PassengerController.GetAll">
            <summary>
            Получение всех пассажиров.
            </summary>
            <returns>Список всех пассажиров.</returns>
        </member>
        <member name="M:SocNet.Controllers.PassengerController.GetById(System.Int32)">
            <summary>
            Получение пассажира по идентификатору.
            </summary>
            <param name="id">Идентификатор пассажира.</param>
            <returns>Пассажир с указанным идентификатором.</returns>
            <response code="200">Возвращает пассажира.</response>
            <response code="400">Если пассажир не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.PassengerController.Add(Domain.Models.Passenger)">
            <summary>
            Создание нового пассажира.
            </summary>
            <param name="Passenger">Данные для создания пассажира.</param>
            <returns>Созданный пассажир.</returns>
            <response code="200">Возвращает созданного пассажира.</response>
        </member>
        <member name="M:SocNet.Controllers.PassengerController.Update(Domain.Models.Passenger)">
            <summary>
            Обновление существующего пассажира.
            </summary>
            <param name="Passenger">Данные для обновления пассажира.</param>
            <returns>Результат обновления.</returns>
            <response code="200">Если пассажир успешно обновлен.</response>
        </member>
        <member name="M:SocNet.Controllers.PassengerController.Delete(System.Int32)">
            <summary>
            Удаление пассажира по идентификатору.
            </summary>
            <param name="id">Идентификатор пассажира.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если пассажир успешно удален.</response>
            <response code="400">Если пассажир не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.ReviewController.GetAll">
            <summary>
            Получение всех отзывов.
            </summary>
            <returns>Список всех отзывов.</returns>
        </member>
        <member name="M:SocNet.Controllers.ReviewController.GetById(System.Int32)">
            <summary>
            Получение отзыва по идентификатору.
            </summary>
            <param name="id">Идентификатор отзыва.</param>
            <returns>Отзыв с указанным идентификатором.</returns>
            <response code="200">Возвращает отзыв.</response>
            <response code="400">Если отзыв не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.ReviewController.Add(Domain.Models.Review)">
            <summary>
            Создание нового отзыва.
            </summary>
            <param name="Review">Данные для создания отзыва.</param>
            <returns>Созданный отзыв.</returns>
            <response code="200">Возвращает созданный отзыв.</response>
        </member>
        <member name="M:SocNet.Controllers.ReviewController.Update(Domain.Models.Review)">
            <summary>
            Обновление существующего отзыва.
            </summary>
            <param name="Review">Данные для обновления отзыва.</param>
            <returns>Результат обновления.</returns>
            <response code="200">Если отзыв успешно обновлен.</response>
        </member>
        <member name="M:SocNet.Controllers.ReviewController.Delete(System.Int32)">
            <summary>
            Удаление отзыва по идентификатору.
            </summary>
            <param name="id">Идентификатор отзыва.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если отзыв успешно удален.</response>
            <response code="400">Если отзыв не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.RoleController.GetAll">
            <summary>
            Получение всех ролей.
            </summary>
            <returns>Список всех ролей.</returns>
        </member>
        <member name="M:SocNet.Controllers.RoleController.GetById(System.Int32)">
            <summary>
            Получение роли по идентификатору.
            </summary>
            <param name="id">Идентификатор роли.</param>
            <returns>Роль с указанным идентификатором.</returns>
            <response code="200">Возвращает роль.</response>
            <response code="400">Если роль не найдена.</response>
        </member>
        <member name="M:SocNet.Controllers.RoleController.Add(Domain.Models.Role)">
            <summary>
            Создание новой роли.
            </summary>
            <param name="Role">Данные для создания роли.</param>
            <returns>Созданная роль.</returns>
            <response code="200">Возвращает созданную роль.</response>
        </member>
        <member name="M:SocNet.Controllers.RoleController.Update(Domain.Models.Role)">
            <summary>
            Обновление существующей роли.
            </summary>
            <param name="Role">Данные для обновления роли.</param>
            <returns>Результат обновления.</returns>
            <response code="200">Если роль успешно обновлена.</response>
        </member>
        <member name="M:SocNet.Controllers.RoleController.Delete(System.Int32)">
            <summary>
            Удаление роли по идентификатору.
            </summary>
            <param name="id">Идентификатор роли.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если роль успешно удалена.</response>
            <response code="400">Если роль не найдена.</response>
        </member>
        <member name="M:SocNet.Controllers.SpecialController.GetAll">
            <summary>
            Получение всех данных
            </summary>
            <returns>Список всех данных</returns>
        </member>
        <member name="M:SocNet.Controllers.SpecialController.GetById(System.Int32)">
            <summary>
            Получение данных по идентиификатору.
            </summary>
            <param name="id">Индефикатор данных.</param>
            <returns>данных с указанным индефикатором.</returns>
            <response code="200">Возвращает данных.</response>
            <response code="404">Если данных не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.SpecialController.Create(WebApplication1.Contract.CreateSpecialService)">
            <summary>
            Создание новых данных.
            </summary>
            <param name="user">Индефикатор данных.</param>
            <returns>Созданный данных.</returns>
            <response code="201">Возвращает созданный данных.</response>
        </member>
        <member name="M:SocNet.Controllers.SpecialController.Update(WebApplication1.Contract.CreateSpecialService)">
            <summary>
            Обновление существующего данных.
            </summary>
            <param name="user">Данные для обновления .</param>
            <returns>Результат обновления.</returns>
            <response code="204">Если данные успешно обновлен.</response>
        </member>
        <member name="M:SocNet.Controllers.SpecialController.Delete(System.Int32)">
            <summary>
            Удаление данных по индентификатору.
            </summary>
            <param name="id">Индентификатору данных.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если данных успешно удален.</response>
            <response code="400">Если данных не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.TiketController.GetAll">
            <summary>
            Получение всех билетов
            </summary>
            <returns>Список всех билетов</returns>
        </member>
        <member name="M:SocNet.Controllers.TiketController.GetById(System.Int32)">
            <summary>
            Получение билета по идентиификатору.
            </summary>
            <param name="id">Индефикатор билета.</param>
            <returns>билета с указанным индефикатором.</returns>
            <response code="200">Возвращает билета.</response>
            <response code="404">Если билета не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.TiketController.Create(WebApplication1.Contract.CreateTicket)">
            <summary>
            Создание нового билета.
            </summary>
            <param name="user">Индефикатор билета.</param>
            <returns>Созданный билета.</returns>
            <response code="201">Возвращает созданный билета.</response>
        </member>
        <member name="M:SocNet.Controllers.TiketController.Update(WebApplication1.Contract.CreateTicket)">
            <summary>
            Обновление существующего билеты.
            </summary>
            <param name="user">Данные для обновления билеты.</param>
            <returns>Результат обновления.</returns>
            <response code="204">Если билеты успешно обновлен.</response>
        </member>
        <member name="M:SocNet.Controllers.TiketController.Delete(System.Int32)">
            <summary>
            Удаление билеты по индентификатору.
            </summary>
            <param name="id">Индентификатору билеты.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если билеты успешно удален.</response>
            <response code="400">Если билеты не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.UserController.GetAll">
            <summary>
            Получение всех пользователей
            </summary>
            <returns>Список всех пользователей</returns>
        </member>
        <member name="M:SocNet.Controllers.UserController.GetById(System.Int32)">
            <summary>
            Получение пользователей по идентиификатору.
            </summary>
            <param name="id">Индефикатор пользователей.</param>
            <returns>пользователь с указанным индефикатором.</returns>
            <response code="200">Возвращает пользователей.</response>
            <response code="404">Если пользователь не найден.</response>
        </member>
        <member name="M:SocNet.Controllers.UserController.Create(WebApplication1.Contract.CreateUserRequest)">
            <summary>
            Создание нового пользователя.
            </summary>
            <param name="user">Индефикатор пользователя.</param>
            <returns>Созданный пользователь.</returns>
            <response code="201">Возвращает созданный пользователь.</response>
        </member>
        <member name="M:SocNet.Controllers.UserController.Update(WebApplication1.Contract.CreateUserRequest)">
            <summary>
            Обновление существующего пользователя.
            </summary>
            <param name="user">Данные для обновления пользователья.</param>
            <returns>Результат обновления.</returns>
            <response code="204">Если пользователь успешно обновлен.</response>
        </member>
        <member name="M:SocNet.Controllers.UserController.Delete(System.Int32)">
            <summary>
            Удаление пользователя по индентификатору.
            </summary>
            <param name="id">Индентификатору пользователя.</param>
            <returns>Результат удаления.</returns>
            <response code="200">Если пользователь успешно удален.</response>
            <response code="400">Если пользователь не найден.</response>
        </member>
    </members>
</doc>
